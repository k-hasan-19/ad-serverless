{"changed":true,"filter":false,"title":"user.py","tooltip":"/entities/user.py","value":"from entities.base import BaseEntity\n\nclass UserMeta(BaseEntity):\n    PK_PREFIX = \"COMPANY#\"\n    SK_PREFIX = \"USER#\"\n    def __init__(self, item):\n        self._item = item\n        self.company_id = item[\"domain\"]\n        self.user_id = item.get(\"email\")\n        self.domain = item[\"domain\"]\n        self.email = item[\"email\"]\n        self.first_name = item[\"first_name\"]\n        self.last_name = item[\"last_name\"]\n        self.address = item[\"address\"]\n        self._set_common()\n\n    def get_keys(self):\n        PK = UserMeta.PK_PREFIX + self.company_id\n        SK = UserMeta.SK_PREFIX + self.user_id\n        return {\"PK\": PK, \"SK\": SK}\n\n    def get_item(self):\n        item = dict(self.__dict__)\n        item.pop('_item', None)\n        return item\n\n    def get_record(self):\n        keys = self.get_keys()\n        item = dict(self.__dict__)\n        item.pop('_item', None)\n        item.update(keys)\n        return item\n        \n    @classmethod\n    def keys_from_ids(cls, company_id, user_id):\n        PK = cls.PK_PREFIX + company_id\n        SK = cls.SK_PREFIX + user_id\n        return (PK, SK,)\n\n    def _set_common(self):\n        item = self._item\n        if item.get(\"created_at\"):\n            self.created_at = item[\"created_at\"]\n            self.updated_at = item[\"updated_at\"]\n        else:\n            self.created_at = self.updated_at = super()._date_time_now()\n        if not item.get('is_admin'):\n            self.is_admin = False\n        else:\n            self.is_admin = bool(item['is_admin'])\n            \n    def __repr__(self):\n        return \"User<{} -- {}>\".format(self.user_id, self.company_id)","undoManager":{"mark":-2,"position":4,"stack":[[{"start":{"row":8,"column":27},"end":{"row":8,"column":28},"action":"insert","lines":["."],"id":2},{"start":{"row":8,"column":28},"end":{"row":8,"column":29},"action":"insert","lines":["g"]},{"start":{"row":8,"column":29},"end":{"row":8,"column":30},"action":"insert","lines":["e"]},{"start":{"row":8,"column":30},"end":{"row":8,"column":31},"action":"insert","lines":["t"]}],[{"start":{"row":8,"column":31},"end":{"row":8,"column":32},"action":"insert","lines":["("],"id":3}],[{"start":{"row":8,"column":32},"end":{"row":8,"column":33},"action":"remove","lines":["["],"id":4}],[{"start":{"row":8,"column":39},"end":{"row":8,"column":40},"action":"remove","lines":["]"],"id":5}],[{"start":{"row":8,"column":39},"end":{"row":8,"column":40},"action":"insert","lines":[")"],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":8,"column":40},"end":{"row":8,"column":40},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":71,"mode":"ace/mode/python"}},"timestamp":1580189434918}