{"filter":false,"title":"eap-openapi.yml","tooltip":"/eap-openapi.yml","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":47,"column":4},"end":{"row":47,"column":5},"action":"insert","lines":[" "],"id":303},{"start":{"row":47,"column":5},"end":{"row":47,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":47,"column":6},"end":{"row":47,"column":44},"action":"insert","lines":["x-amazon-apigateway-request-validators"],"id":304}],[{"start":{"row":47,"column":44},"end":{"row":47,"column":45},"action":"insert","lines":[":"],"id":305}],[{"start":{"row":47,"column":45},"end":{"row":48,"column":0},"action":"insert","lines":["",""],"id":306},{"start":{"row":48,"column":0},"end":{"row":48,"column":6},"action":"insert","lines":["      "]},{"start":{"row":48,"column":6},"end":{"row":48,"column":7},"action":"insert","lines":[" "]},{"start":{"row":48,"column":7},"end":{"row":48,"column":8},"action":"insert","lines":[" "]}],[{"start":{"row":48,"column":8},"end":{"row":48,"column":9},"action":"insert","lines":["b"],"id":307},{"start":{"row":48,"column":9},"end":{"row":48,"column":10},"action":"insert","lines":["a"]},{"start":{"row":48,"column":10},"end":{"row":48,"column":11},"action":"insert","lines":["s"]},{"start":{"row":48,"column":11},"end":{"row":48,"column":12},"action":"insert","lines":["i"]},{"start":{"row":48,"column":12},"end":{"row":48,"column":13},"action":"insert","lines":["c"]}],[{"start":{"row":48,"column":13},"end":{"row":48,"column":14},"action":"insert","lines":[":"],"id":308}],[{"start":{"row":48,"column":14},"end":{"row":49,"column":0},"action":"insert","lines":["",""],"id":309},{"start":{"row":49,"column":0},"end":{"row":49,"column":8},"action":"insert","lines":["        "]},{"start":{"row":49,"column":8},"end":{"row":49,"column":9},"action":"insert","lines":[" "]},{"start":{"row":49,"column":9},"end":{"row":49,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":49,"column":10},"end":{"row":49,"column":11},"action":"insert","lines":["v"],"id":310},{"start":{"row":49,"column":11},"end":{"row":49,"column":12},"action":"insert","lines":["a"]},{"start":{"row":49,"column":12},"end":{"row":49,"column":13},"action":"insert","lines":["l"]},{"start":{"row":49,"column":13},"end":{"row":49,"column":14},"action":"insert","lines":["i"]},{"start":{"row":49,"column":14},"end":{"row":49,"column":15},"action":"insert","lines":["d"]},{"start":{"row":49,"column":15},"end":{"row":49,"column":16},"action":"insert","lines":["a"]},{"start":{"row":49,"column":16},"end":{"row":49,"column":17},"action":"insert","lines":["t"]},{"start":{"row":49,"column":17},"end":{"row":49,"column":18},"action":"insert","lines":["e"]}],[{"start":{"row":49,"column":18},"end":{"row":49,"column":19},"action":"insert","lines":["R"],"id":311},{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"insert","lines":["e"]},{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":["q"]},{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"insert","lines":["u"]},{"start":{"row":49,"column":22},"end":{"row":49,"column":23},"action":"insert","lines":["e"]},{"start":{"row":49,"column":23},"end":{"row":49,"column":24},"action":"insert","lines":["s"]},{"start":{"row":49,"column":24},"end":{"row":49,"column":25},"action":"insert","lines":["t"]}],[{"start":{"row":49,"column":25},"end":{"row":49,"column":26},"action":"insert","lines":["B"],"id":312},{"start":{"row":49,"column":26},"end":{"row":49,"column":27},"action":"insert","lines":["o"]},{"start":{"row":49,"column":27},"end":{"row":49,"column":28},"action":"insert","lines":["d"]},{"start":{"row":49,"column":28},"end":{"row":49,"column":29},"action":"insert","lines":["y"]}],[{"start":{"row":49,"column":29},"end":{"row":49,"column":30},"action":"insert","lines":[":"],"id":313}],[{"start":{"row":49,"column":30},"end":{"row":49,"column":31},"action":"insert","lines":[" "],"id":314},{"start":{"row":49,"column":31},"end":{"row":49,"column":32},"action":"insert","lines":["t"]},{"start":{"row":49,"column":32},"end":{"row":49,"column":33},"action":"insert","lines":["r"]},{"start":{"row":49,"column":33},"end":{"row":49,"column":34},"action":"insert","lines":["u"]},{"start":{"row":49,"column":34},"end":{"row":49,"column":35},"action":"insert","lines":["e"]}],[{"start":{"row":49,"column":35},"end":{"row":50,"column":0},"action":"insert","lines":["",""],"id":315},{"start":{"row":50,"column":0},"end":{"row":50,"column":10},"action":"insert","lines":["          "]},{"start":{"row":50,"column":10},"end":{"row":50,"column":11},"action":"insert","lines":["v"]}],[{"start":{"row":50,"column":11},"end":{"row":50,"column":12},"action":"insert","lines":["a"],"id":316},{"start":{"row":50,"column":12},"end":{"row":50,"column":13},"action":"insert","lines":["l"]},{"start":{"row":50,"column":13},"end":{"row":50,"column":14},"action":"insert","lines":["i"]},{"start":{"row":50,"column":14},"end":{"row":50,"column":15},"action":"insert","lines":["d"]},{"start":{"row":50,"column":15},"end":{"row":50,"column":16},"action":"insert","lines":["a"]}],[{"start":{"row":50,"column":10},"end":{"row":50,"column":16},"action":"remove","lines":["valida"],"id":317},{"start":{"row":50,"column":10},"end":{"row":50,"column":29},"action":"insert","lines":["validateRequestBody"]}],[{"start":{"row":50,"column":28},"end":{"row":50,"column":29},"action":"remove","lines":["y"],"id":318},{"start":{"row":50,"column":27},"end":{"row":50,"column":28},"action":"remove","lines":["d"]},{"start":{"row":50,"column":26},"end":{"row":50,"column":27},"action":"remove","lines":["o"]},{"start":{"row":50,"column":25},"end":{"row":50,"column":26},"action":"remove","lines":["B"]}],[{"start":{"row":50,"column":25},"end":{"row":50,"column":26},"action":"insert","lines":["P"],"id":319},{"start":{"row":50,"column":26},"end":{"row":50,"column":27},"action":"insert","lines":["a"]},{"start":{"row":50,"column":27},"end":{"row":50,"column":28},"action":"insert","lines":["r"]},{"start":{"row":50,"column":28},"end":{"row":50,"column":29},"action":"insert","lines":["a"]},{"start":{"row":50,"column":29},"end":{"row":50,"column":30},"action":"insert","lines":["m"]},{"start":{"row":50,"column":30},"end":{"row":50,"column":31},"action":"insert","lines":["e"]},{"start":{"row":50,"column":31},"end":{"row":50,"column":32},"action":"insert","lines":["t"]},{"start":{"row":50,"column":32},"end":{"row":50,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":50,"column":33},"end":{"row":50,"column":34},"action":"insert","lines":["r"],"id":320},{"start":{"row":50,"column":34},"end":{"row":50,"column":35},"action":"insert","lines":["s"]}],[{"start":{"row":50,"column":35},"end":{"row":50,"column":36},"action":"insert","lines":[":"],"id":321}],[{"start":{"row":50,"column":36},"end":{"row":50,"column":37},"action":"insert","lines":[" "],"id":322},{"start":{"row":50,"column":37},"end":{"row":50,"column":38},"action":"insert","lines":["t"]},{"start":{"row":50,"column":38},"end":{"row":50,"column":39},"action":"insert","lines":["r"]},{"start":{"row":50,"column":39},"end":{"row":50,"column":40},"action":"insert","lines":["u"]},{"start":{"row":50,"column":40},"end":{"row":50,"column":41},"action":"insert","lines":["e"]}],[{"start":{"row":77,"column":23},"end":{"row":78,"column":0},"action":"insert","lines":["",""],"id":323},{"start":{"row":78,"column":0},"end":{"row":78,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":78,"column":4},"end":{"row":78,"column":8},"action":"remove","lines":["    "],"id":324}],[{"start":{"row":78,"column":4},"end":{"row":78,"column":5},"action":"insert","lines":[" "],"id":325},{"start":{"row":78,"column":5},"end":{"row":78,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":78,"column":6},"end":{"row":81,"column":41},"action":"insert","lines":["x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true"],"id":326}],[{"start":{"row":77,"column":23},"end":{"row":78,"column":0},"action":"insert","lines":["",""],"id":327},{"start":{"row":78,"column":0},"end":{"row":78,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":78,"column":4},"end":{"row":78,"column":8},"action":"remove","lines":["    "],"id":328}],[{"start":{"row":78,"column":4},"end":{"row":78,"column":5},"action":"insert","lines":[" "],"id":329},{"start":{"row":78,"column":5},"end":{"row":78,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":78,"column":6},"end":{"row":78,"column":61},"action":"insert","lines":["\"x-amazon-apigateway-request-validator\": \"params-only\","],"id":330}],[{"start":{"row":78,"column":59},"end":{"row":78,"column":60},"action":"remove","lines":["\""],"id":331},{"start":{"row":78,"column":58},"end":{"row":78,"column":59},"action":"remove","lines":["y"]},{"start":{"row":78,"column":57},"end":{"row":78,"column":58},"action":"remove","lines":["l"]},{"start":{"row":78,"column":56},"end":{"row":78,"column":57},"action":"remove","lines":["n"]},{"start":{"row":78,"column":55},"end":{"row":78,"column":56},"action":"remove","lines":["o"]},{"start":{"row":78,"column":54},"end":{"row":78,"column":55},"action":"remove","lines":["-"]},{"start":{"row":78,"column":53},"end":{"row":78,"column":54},"action":"remove","lines":["s"]},{"start":{"row":78,"column":52},"end":{"row":78,"column":53},"action":"remove","lines":["m"]},{"start":{"row":78,"column":51},"end":{"row":78,"column":52},"action":"remove","lines":["a"]},{"start":{"row":78,"column":50},"end":{"row":78,"column":51},"action":"remove","lines":["r"]},{"start":{"row":78,"column":49},"end":{"row":78,"column":50},"action":"remove","lines":["a"]},{"start":{"row":78,"column":48},"end":{"row":78,"column":49},"action":"remove","lines":["p"]},{"start":{"row":78,"column":47},"end":{"row":78,"column":48},"action":"remove","lines":["\""]}],[{"start":{"row":78,"column":47},"end":{"row":78,"column":48},"action":"insert","lines":["b"],"id":332},{"start":{"row":78,"column":48},"end":{"row":78,"column":49},"action":"insert","lines":["a"]},{"start":{"row":78,"column":49},"end":{"row":78,"column":50},"action":"insert","lines":["s"]},{"start":{"row":78,"column":50},"end":{"row":78,"column":51},"action":"insert","lines":["i"]},{"start":{"row":78,"column":51},"end":{"row":78,"column":52},"action":"insert","lines":["c"]}],[{"start":{"row":78,"column":44},"end":{"row":78,"column":45},"action":"remove","lines":["\""],"id":333}],[{"start":{"row":78,"column":6},"end":{"row":78,"column":7},"action":"remove","lines":["\""],"id":334}],[{"start":{"row":78,"column":50},"end":{"row":78,"column":51},"action":"remove","lines":[","],"id":335}],[{"start":{"row":46,"column":23},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":336},{"start":{"row":47,"column":0},"end":{"row":47,"column":8},"action":"insert","lines":["        "]},{"start":{"row":47,"column":8},"end":{"row":47,"column":9},"action":"insert","lines":["="]}],[{"start":{"row":47,"column":8},"end":{"row":47,"column":9},"action":"remove","lines":["="],"id":337},{"start":{"row":47,"column":4},"end":{"row":47,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":47,"column":4},"end":{"row":47,"column":5},"action":"insert","lines":[" "],"id":338},{"start":{"row":47,"column":5},"end":{"row":47,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":47,"column":6},"end":{"row":47,"column":50},"action":"insert","lines":["x-amazon-apigateway-request-validator: basic"],"id":339}],[{"start":{"row":48,"column":6},"end":{"row":51,"column":41},"action":"remove","lines":["x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true"],"id":340},{"start":{"row":48,"column":6},"end":{"row":54,"column":35},"action":"insert","lines":["x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true"]}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "],"id":341},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"insert","lines":["    "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":4},"action":"insert","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "],"id":342},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"insert","lines":["    "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":4},"action":"insert","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"remove","lines":["    "],"id":343},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"remove","lines":["    "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"remove","lines":["    "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"remove","lines":["    "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":4},"action":"remove","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":49,"column":0},"end":{"row":49,"column":4},"action":"insert","lines":["    "],"id":344},{"start":{"row":50,"column":0},"end":{"row":50,"column":4},"action":"insert","lines":["    "]},{"start":{"row":51,"column":0},"end":{"row":51,"column":4},"action":"insert","lines":["    "]},{"start":{"row":52,"column":0},"end":{"row":52,"column":4},"action":"insert","lines":["    "]},{"start":{"row":53,"column":0},"end":{"row":53,"column":4},"action":"insert","lines":["    "]},{"start":{"row":54,"column":0},"end":{"row":54,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":49,"column":9},"end":{"row":49,"column":10},"action":"remove","lines":[" "],"id":345},{"start":{"row":49,"column":8},"end":{"row":49,"column":9},"action":"remove","lines":[" "]}],[{"start":{"row":50,"column":8},"end":{"row":50,"column":12},"action":"remove","lines":["    "],"id":346}],[{"start":{"row":50,"column":8},"end":{"row":50,"column":9},"action":"insert","lines":[" "],"id":347},{"start":{"row":50,"column":9},"end":{"row":50,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":51,"column":10},"end":{"row":51,"column":11},"action":"remove","lines":[" "],"id":348},{"start":{"row":51,"column":10},"end":{"row":51,"column":11},"action":"remove","lines":[" "]}],[{"start":{"row":52,"column":9},"end":{"row":52,"column":10},"action":"remove","lines":[" "],"id":349},{"start":{"row":52,"column":8},"end":{"row":52,"column":9},"action":"remove","lines":[" "]}],[{"start":{"row":53,"column":8},"end":{"row":53,"column":12},"action":"remove","lines":["    "],"id":350}],[{"start":{"row":53,"column":8},"end":{"row":53,"column":9},"action":"insert","lines":[" "],"id":351},{"start":{"row":53,"column":9},"end":{"row":53,"column":10},"action":"insert","lines":[" "]}],[{"start":{"row":54,"column":10},"end":{"row":54,"column":11},"action":"remove","lines":[" "],"id":352},{"start":{"row":54,"column":10},"end":{"row":54,"column":11},"action":"remove","lines":[" "]}],[{"start":{"row":82,"column":6},"end":{"row":86,"column":41},"action":"remove","lines":["x-amazon-apigateway-request-validator: basic","      x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true"],"id":353},{"start":{"row":82,"column":6},"end":{"row":89,"column":41},"action":"insert","lines":["      x-amazon-apigateway-request-validator: basic","      x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true","        params-only:","          validateRequestBody: false","          validateRequestParameters: true"]}],[{"start":{"row":82,"column":8},"end":{"row":82,"column":12},"action":"remove","lines":["    "],"id":354},{"start":{"row":82,"column":4},"end":{"row":82,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":82,"column":4},"end":{"row":82,"column":5},"action":"insert","lines":[" "],"id":355},{"start":{"row":82,"column":5},"end":{"row":82,"column":6},"action":"insert","lines":[" "]}],[{"start":{"row":70,"column":51},"end":{"row":71,"column":0},"action":"insert","lines":["",""],"id":356},{"start":{"row":71,"column":0},"end":{"row":71,"column":10},"action":"insert","lines":["          "]}],[{"start":{"row":71,"column":10},"end":{"row":75,"column":52},"action":"insert","lines":["description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'"],"id":357}],[{"start":{"row":70,"column":51},"end":{"row":71,"column":64},"action":"remove","lines":["","          description: A JSON object of company meta information"],"id":358}],[{"start":{"row":48,"column":0},"end":{"row":54,"column":41},"action":"remove","lines":["      x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true","        params-only:","          validateRequestBody: false","          validateRequestParameters: true"],"id":359}],[{"start":{"row":47,"column":50},"end":{"row":48,"column":0},"action":"remove","lines":["",""],"id":360}],[{"start":{"row":11,"column":30},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":361},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"insert","lines":["    "]},{"start":{"row":12,"column":4},"end":{"row":13,"column":0},"action":"insert","lines":["",""]},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"remove","lines":["    "],"id":362}],[{"start":{"row":12,"column":4},"end":{"row":13,"column":0},"action":"remove","lines":["",""],"id":363},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":18,"column":41},"action":"insert","lines":["      x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true","        params-only:","          validateRequestBody: false","          validateRequestParameters: true"],"id":364}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "],"id":365},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"remove","lines":["    "]},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"remove","lines":["    "]},{"start":{"row":17,"column":0},"end":{"row":17,"column":4},"action":"remove","lines":["    "]},{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":[" "],"id":366},{"start":{"row":12,"column":0},"end":{"row":12,"column":1},"action":"remove","lines":[" "]}],[{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"remove","lines":["    "],"id":367}],[{"start":{"row":13,"column":0},"end":{"row":13,"column":1},"action":"insert","lines":[" "],"id":368},{"start":{"row":13,"column":1},"end":{"row":13,"column":2},"action":"insert","lines":[" "]}],[{"start":{"row":14,"column":2},"end":{"row":14,"column":3},"action":"remove","lines":[" "],"id":369},{"start":{"row":14,"column":2},"end":{"row":14,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":15,"column":2},"end":{"row":15,"column":3},"action":"remove","lines":[" "],"id":370},{"start":{"row":15,"column":2},"end":{"row":15,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":16,"column":2},"end":{"row":16,"column":3},"action":"remove","lines":[" "],"id":371},{"start":{"row":16,"column":2},"end":{"row":16,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":17,"column":2},"end":{"row":17,"column":3},"action":"remove","lines":[" "],"id":372},{"start":{"row":17,"column":2},"end":{"row":17,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":18,"column":2},"end":{"row":18,"column":3},"action":"remove","lines":[" "],"id":373},{"start":{"row":18,"column":2},"end":{"row":18,"column":3},"action":"remove","lines":[" "]}],[{"start":{"row":11,"column":30},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":374},{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":4},"action":"remove","lines":["    "],"id":375}],[{"start":{"row":87,"column":50},"end":{"row":94,"column":41},"action":"remove","lines":["","      x-amazon-apigateway-request-validators:","        basic:","          validateRequestBody: true","          validateRequestParameters: true","        params-only:","          validateRequestBody: false","          validateRequestParameters: true"],"id":376}],[{"start":{"row":109,"column":17},"end":{"row":110,"column":0},"action":"insert","lines":["",""],"id":377},{"start":{"row":110,"column":0},"end":{"row":110,"column":8},"action":"insert","lines":["        "]},{"start":{"row":110,"column":8},"end":{"row":111,"column":0},"action":"insert","lines":["",""]},{"start":{"row":111,"column":0},"end":{"row":111,"column":8},"action":"insert","lines":["        "]},{"start":{"row":111,"column":8},"end":{"row":112,"column":0},"action":"insert","lines":["",""]},{"start":{"row":112,"column":0},"end":{"row":112,"column":8},"action":"insert","lines":["        "]},{"start":{"row":112,"column":8},"end":{"row":113,"column":0},"action":"insert","lines":["",""]},{"start":{"row":113,"column":0},"end":{"row":113,"column":8},"action":"insert","lines":["        "]},{"start":{"row":113,"column":8},"end":{"row":114,"column":0},"action":"insert","lines":["",""]},{"start":{"row":114,"column":0},"end":{"row":114,"column":8},"action":"insert","lines":["        "]},{"start":{"row":114,"column":8},"end":{"row":115,"column":0},"action":"insert","lines":["",""]},{"start":{"row":115,"column":0},"end":{"row":115,"column":8},"action":"insert","lines":["        "]},{"start":{"row":115,"column":8},"end":{"row":116,"column":0},"action":"insert","lines":["",""]},{"start":{"row":116,"column":0},"end":{"row":116,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":116,"column":6},"end":{"row":116,"column":8},"action":"remove","lines":["  "],"id":378},{"start":{"row":116,"column":4},"end":{"row":116,"column":6},"action":"remove","lines":["  "]},{"start":{"row":116,"column":2},"end":{"row":116,"column":4},"action":"remove","lines":["  "]},{"start":{"row":116,"column":0},"end":{"row":116,"column":2},"action":"remove","lines":["  "]},{"start":{"row":115,"column":8},"end":{"row":116,"column":0},"action":"remove","lines":["",""]},{"start":{"row":115,"column":6},"end":{"row":115,"column":8},"action":"remove","lines":["  "]}],[{"start":{"row":115,"column":4},"end":{"row":115,"column":6},"action":"remove","lines":["  "],"id":379},{"start":{"row":115,"column":2},"end":{"row":115,"column":4},"action":"remove","lines":["  "]},{"start":{"row":115,"column":0},"end":{"row":115,"column":2},"action":"remove","lines":["  "]},{"start":{"row":114,"column":8},"end":{"row":115,"column":0},"action":"remove","lines":["",""]},{"start":{"row":114,"column":6},"end":{"row":114,"column":8},"action":"remove","lines":["  "]},{"start":{"row":114,"column":4},"end":{"row":114,"column":6},"action":"remove","lines":["  "]}],[{"start":{"row":114,"column":2},"end":{"row":114,"column":4},"action":"remove","lines":["  "],"id":380},{"start":{"row":114,"column":0},"end":{"row":114,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":114,"column":0},"end":{"row":119,"column":27},"action":"insert","lines":["created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time"],"id":381}],[{"start":{"row":115,"column":0},"end":{"row":115,"column":2},"action":"remove","lines":["  "],"id":382},{"start":{"row":116,"column":0},"end":{"row":116,"column":2},"action":"remove","lines":["  "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":2},"action":"remove","lines":["  "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":2},"action":"remove","lines":["  "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":115,"column":0},"end":{"row":115,"column":2},"action":"remove","lines":["  "],"id":383},{"start":{"row":116,"column":0},"end":{"row":116,"column":2},"action":"remove","lines":["  "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":2},"action":"remove","lines":["  "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":2},"action":"remove","lines":["  "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":115,"column":0},"end":{"row":115,"column":2},"action":"remove","lines":["  "],"id":384},{"start":{"row":116,"column":0},"end":{"row":116,"column":2},"action":"remove","lines":["  "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":2},"action":"remove","lines":["  "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":2},"action":"remove","lines":["  "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":115,"column":0},"end":{"row":115,"column":2},"action":"remove","lines":["  "],"id":385},{"start":{"row":116,"column":0},"end":{"row":116,"column":2},"action":"remove","lines":["  "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":2},"action":"remove","lines":["  "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":2},"action":"remove","lines":["  "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":2},"action":"remove","lines":["  "]}],[{"start":{"row":114,"column":0},"end":{"row":119,"column":19},"action":"remove","lines":["created_at:","  type: string","  format: date-time","updated_at:","  type: string","  format: date-time"],"id":386}],[{"start":{"row":113,"column":8},"end":{"row":114,"column":0},"action":"remove","lines":["",""],"id":387},{"start":{"row":113,"column":6},"end":{"row":113,"column":8},"action":"remove","lines":["  "]},{"start":{"row":113,"column":4},"end":{"row":113,"column":6},"action":"remove","lines":["  "]},{"start":{"row":113,"column":2},"end":{"row":113,"column":4},"action":"remove","lines":["  "]},{"start":{"row":113,"column":0},"end":{"row":113,"column":2},"action":"remove","lines":["  "]},{"start":{"row":112,"column":8},"end":{"row":113,"column":0},"action":"remove","lines":["",""]},{"start":{"row":112,"column":6},"end":{"row":112,"column":8},"action":"remove","lines":["  "]},{"start":{"row":112,"column":4},"end":{"row":112,"column":6},"action":"remove","lines":["  "]}],[{"start":{"row":112,"column":2},"end":{"row":112,"column":4},"action":"remove","lines":["  "],"id":388},{"start":{"row":112,"column":0},"end":{"row":112,"column":2},"action":"remove","lines":["  "]},{"start":{"row":111,"column":8},"end":{"row":112,"column":0},"action":"remove","lines":["",""]},{"start":{"row":111,"column":6},"end":{"row":111,"column":8},"action":"remove","lines":["  "]},{"start":{"row":111,"column":4},"end":{"row":111,"column":6},"action":"remove","lines":["  "]},{"start":{"row":111,"column":2},"end":{"row":111,"column":4},"action":"remove","lines":["  "]},{"start":{"row":111,"column":0},"end":{"row":111,"column":2},"action":"remove","lines":["  "]},{"start":{"row":110,"column":8},"end":{"row":111,"column":0},"action":"remove","lines":["",""]},{"start":{"row":110,"column":6},"end":{"row":110,"column":8},"action":"remove","lines":["  "]},{"start":{"row":110,"column":4},"end":{"row":110,"column":6},"action":"remove","lines":["  "]},{"start":{"row":110,"column":2},"end":{"row":110,"column":4},"action":"remove","lines":["  "]},{"start":{"row":110,"column":0},"end":{"row":110,"column":2},"action":"remove","lines":["  "]},{"start":{"row":109,"column":17},"end":{"row":110,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":109,"column":17},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.1'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - developers","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","      # Both properties are required","      required:","        - name","        - domain","        - address"],"id":389},{"start":{"row":0,"column":0},"end":{"row":115,"column":17},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.2'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - developers","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address"]}],[{"start":{"row":0,"column":0},"end":{"row":115,"column":17},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.2'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - developers","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address"],"id":390},{"start":{"row":0,"column":0},"end":{"row":221,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":221,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":391},{"start":{"row":0,"column":0},"end":{"row":221,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":221,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User created or updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":392},{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":393},{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":394},{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":234,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":395},{"start":{"row":0,"column":0},"end":{"row":236,"column":19},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"]}],[{"start":{"row":0,"column":0},"end":{"row":236,"column":19},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.3'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      # Both properties are required","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      # Both properties are required","      required:","        - company_id","        - email","        - first_name","        - last_name"],"id":396},{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/Can_share_on'","        points_map:","          $ref: '#/components/schemas/Points_map'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    Can_share_on:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    Points_map:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/Can_share_on'","      required:","        - default","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/Can_share_on'","        points_map:","          $ref: '#/components/schemas/Points_map'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    Can_share_on:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    Points_map:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/Can_share_on'","      required:","        - default","      additionalProperties:","        type: integer"],"id":398},{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/Can_share_on'","        points_map:","          $ref: '#/components/schemas/Points_map'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    Can_share_on:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    Points_map:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/Can_share_on'","      required:","        - default","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/Can_share_on'","        points_map:","          $ref: '#/components/schemas/Points_map'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    Can_share_on:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    Points_map:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/Can_share_on'","      required:","        - default","      additionalProperties:","        type: integer"],"id":399},{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOn'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      required:","        - default","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":359,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOn'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      required:","        - default","      additionalProperties:","        type: integer"],"id":400},{"start":{"row":0,"column":0},"end":{"row":363,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      required:","        - default","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":363,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      required:","        - default","      additionalProperties:","        type: integer"],"id":401},{"start":{"row":0,"column":0},"end":{"row":363,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      # required:","      #   - default","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":363,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        default:","          $ref: '#/components/schemas/CanShareOn'","      # required:","      #   - default","      additionalProperties:","        type: integer"],"id":402},{"start":{"row":0,"column":0},"end":{"row":366,"column":21},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        TWITTER:","          type: integer","        FACEBOOK:","          type: integer","        LINKEDIN:","          type: integer","        # $ref: '#/components/schemas/CanShareOn'","      additionalProperties:","        type: integer"]}],[{"start":{"row":0,"column":0},"end":{"row":366,"column":21},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        TWITTER:","          type: integer","        FACEBOOK:","          type: integer","        LINKEDIN:","          type: integer","        # $ref: '#/components/schemas/CanShareOn'","      additionalProperties:","        type: integer"],"id":403},{"start":{"row":0,"column":0},"end":{"row":364,"column":49},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        TWITTER:","          type: integer","        FACEBOOK:","          type: integer","        LINKEDIN:","          type: integer","        # $ref: '#/components/schemas/CanShareOn'"]}],[{"start":{"row":0,"column":0},"end":{"row":364,"column":49},"action":"remove","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        TWITTER:","          type: integer","        FACEBOOK:","          type: integer","        LINKEDIN:","          type: integer","        # $ref: '#/components/schemas/CanShareOn'"],"id":404},{"start":{"row":0,"column":0},"end":{"row":365,"column":33},"action":"insert","lines":["openapi: 3.0.0","# Added by API Auto Mocking Plugin","servers:","  - description: SwaggerHub API Auto Mocking","    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0","info:","# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html","  title: EAP InNeed API","  description: EAP CRUD & Analytics web service","  version: '0.4'","  contact:","    email: kamrul@inneed.cloud","","x-amazon-apigateway-request-validators:","  basic:","    validateRequestBody: true","    validateRequestParameters: true","  params-only:","    validateRequestBody: false","    validateRequestParameters: true","  ","","","paths:","  /company:","    get:","      tags:","        - admins","      summary: Returns a Company meta information by ID","      operationId: getCompanyById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up company meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of company meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new Company.","      operationId: addCompany","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Company'","        description: Company information to add","      responses:","        '200':","          description: 'Company updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '201':","          description: 'Company created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Company'","        '400':","          description: 'Invalid input'","        '409':","          description: 'Item already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutCompanyFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /user:","    get:","      tags:","        - admins","      summary: Returns a User meta information by ID","      operationId: getUserById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass an company id for looking up relevant user meta information","          schema:","            type : string","            format: uuid","        - name: user_id","          in: query","          required: true","          description: pass an user id for looking up user meta information","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - admins","      summary: Creates a new User.","      operationId: addUser","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/User'","        description: User information to add","      responses:","        '200':","          description: 'User updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","        '201':","          description: 'User created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/User'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'User already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutUserFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","      ","  /post:","    get:","      tags:","        - users","      summary: Returns a Post information by ID","      operationId: getPostById","      parameters:","        - name: company_id","          in: query","          required: true","          description: pass a company id for looking up relevant Post details","          schema:","            type : string","            format: uuid","        - name: post_id","          in: query","          required: true","          description: pass a post id for looking up Post details","          schema:","            type : string","            format: uuid","      responses:","        '200':    # status code","          description: A JSON object of user meta information","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '400':","          description: Bad input parameters","          ","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","    put:","      tags:","        - users","      summary: Creates a new Post.","      operationId: addPost","      requestBody:","        required: true","        content:","          application/json:","            schema:","              $ref: '#/components/schemas/Post'","        description: Post details to add","      responses:","        '200':","          description: 'Post updated'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","        '201':","          description: 'Post created'","          content:","            application/json:","              schema:","                $ref: '#/components/schemas/Post'","          ","        '400':","          description: 'Invalid input'","        '409':","          description: 'Post already exists'","      x-amazon-apigateway-integration:","        uri:","          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPutPostFunction.Arn}/invocations","        httpMethod: POST","        passthroughBehavior: WHEN_NO_TEMPLATES","        contentHandling: CONVERT_TO_TEXT","        type: aws_proxy","      x-amazon-apigateway-request-validator: basic","","components:","  schemas:","    Company:","      properties:","        company_id:","          type: string","          format: uuid","        name:","          type: string","          minLength: 3","          maxLength: 40","        domain:","          type: string","          format: hostname","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      required:","        - name","        - domain","        - address","        ","    User:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        email:","          type: string","          format: email","        first_name:","          type: string","          minLength: 3","          maxLength: 10","        last_name:","          type: string","          minLength: 3","          maxLength: 10","        address:","          type: string","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","        is_admin:","          type: boolean","      required:","        - company_id","        - email","        - first_name","        - last_name","        - is_admin","    Post:","      properties:","        company_id:","          type: string","          format: uuid","        user_id:","          type: string","          format: uuid","        post_id:","          type: string","          format: uuid","        post_title:","          type: string","          minLength: 3","          maxLength: 60","        post_content:","          type: string","        can_share_on:","          $ref: '#/components/schemas/CanShareOnArray'","        points_map:","          $ref: '#/components/schemas/PointsMap'","        created_at:","          type: string","          format: date-time","        updated_at:","          type: string","          format: date-time","      ","      required:","        - company_id","        - user_id","        - post_title","        - post_content","    CanShareOnArray:","      type: array","      items:","        $ref: '#/components/schemas/CanShareOn'","    CanShareOn:","      type: string","      enum: [TWITTER, FACEBOOK, LINKEDIN]","    PointsMap:","      type: object","      properties:","        TWITTER:","          type: integer","        FACEBOOK:","          type: integer","        LINKEDIN:","          type: integer","        # $ref: '#/components/schemas/CanShareOn'","      additionalProperties: false"]}]]},"ace":{"folds":[],"scrolltop":4268,"scrollleft":0,"selection":{"start":{"row":365,"column":33},"end":{"row":365,"column":33},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":327,"state":"start","mode":"ace/mode/yaml"}},"timestamp":1579432222629,"hash":"e8008f9383ed6e51953f37bfc62d4d7fa5d2cafe"}