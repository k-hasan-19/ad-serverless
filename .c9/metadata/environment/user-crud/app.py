{"filter":false,"title":"app.py","tooltip":"/user-crud/app.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":68,"column":247},"end":{"row":68,"column":248},"action":"remove","lines":[")"],"id":91}],[{"start":{"row":68,"column":209},"end":{"row":68,"column":223},"action":"insert","lines":["if_not_exists("],"id":92}],[{"start":{"row":68,"column":223},"end":{"row":68,"column":224},"action":"insert","lines":["m"],"id":93}],[{"start":{"row":68,"column":223},"end":{"row":68,"column":224},"action":"remove","lines":["m"],"id":94}],[{"start":{"row":68,"column":223},"end":{"row":68,"column":224},"action":"insert","lines":[","],"id":95}],[{"start":{"row":68,"column":235},"end":{"row":68,"column":236},"action":"insert","lines":[")"],"id":96}],[{"start":{"row":68,"column":223},"end":{"row":68,"column":234},"action":"insert","lines":["#created_at"],"id":97}],[{"start":{"row":68,"column":235},"end":{"row":68,"column":236},"action":"insert","lines":[" "],"id":98}],[{"start":{"row":16,"column":23},"end":{"row":17,"column":0},"action":"insert","lines":["",""],"id":99},{"start":{"row":17,"column":0},"end":{"row":17,"column":8},"action":"insert","lines":["        "]},{"start":{"row":17,"column":8},"end":{"row":18,"column":0},"action":"insert","lines":["",""]},{"start":{"row":18,"column":0},"end":{"row":18,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":18,"column":4},"end":{"row":18,"column":8},"action":"remove","lines":["    "],"id":100}],[{"start":{"row":18,"column":4},"end":{"row":26,"column":23},"action":"insert","lines":["if event['httpMethod']=='GET':","        response = get_company_meta(event, context)","        return response","    if event['httpMethod']=='POST':","        response = post_company_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_company_meta(event, context)","        return response"],"id":101}],[{"start":{"row":19,"column":19},"end":{"row":19,"column":35},"action":"remove","lines":["get_company_meta"],"id":102},{"start":{"row":19,"column":19},"end":{"row":19,"column":32},"action":"insert","lines":["get_user_meta"]}],[{"start":{"row":25,"column":19},"end":{"row":25,"column":35},"action":"remove","lines":["put_company_meta"],"id":103},{"start":{"row":25,"column":19},"end":{"row":25,"column":32},"action":"insert","lines":["put_user_meta"]}],[{"start":{"row":22,"column":19},"end":{"row":22,"column":36},"action":"remove","lines":["post_company_meta"],"id":104},{"start":{"row":22,"column":19},"end":{"row":22,"column":32},"action":"insert","lines":["put_user_meta"]}],[{"start":{"row":22,"column":19},"end":{"row":22,"column":22},"action":"remove","lines":["put"],"id":105},{"start":{"row":22,"column":19},"end":{"row":22,"column":20},"action":"insert","lines":["p"]},{"start":{"row":22,"column":20},"end":{"row":22,"column":21},"action":"insert","lines":["o"]},{"start":{"row":22,"column":21},"end":{"row":22,"column":22},"action":"insert","lines":["s"]},{"start":{"row":22,"column":22},"end":{"row":22,"column":23},"action":"insert","lines":["t"]}],[{"start":{"row":11,"column":4},"end":{"row":17,"column":5},"action":"remove","lines":["if event['httpMethod']=='GET':","        response = get_user_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_user_meta(event, context)","        return response","     "],"id":106}],[{"start":{"row":3,"column":14},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":107}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":31},"action":"insert","lines":["from entities.company import CompanyMeta","from pprint import pprint as pp"],"id":108}],[{"start":{"row":4,"column":14},"end":{"row":4,"column":21},"action":"remove","lines":["company"],"id":109},{"start":{"row":4,"column":14},"end":{"row":4,"column":15},"action":"insert","lines":["u"]},{"start":{"row":4,"column":15},"end":{"row":4,"column":16},"action":"insert","lines":["s"]},{"start":{"row":4,"column":16},"end":{"row":4,"column":17},"action":"insert","lines":["e"]},{"start":{"row":4,"column":17},"end":{"row":4,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":37},"action":"remove","lines":["CompanyMeta"],"id":110},{"start":{"row":4,"column":26},"end":{"row":4,"column":27},"action":"insert","lines":["U"]},{"start":{"row":4,"column":27},"end":{"row":4,"column":28},"action":"insert","lines":["s"]},{"start":{"row":4,"column":28},"end":{"row":4,"column":29},"action":"insert","lines":["e"]},{"start":{"row":4,"column":29},"end":{"row":4,"column":30},"action":"insert","lines":["r"]}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":30},"action":"remove","lines":["User"],"id":111},{"start":{"row":4,"column":26},"end":{"row":4,"column":34},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":4,"column":26},"end":{"row":4,"column":34},"action":"remove","lines":["UserMeta"],"id":112},{"start":{"row":4,"column":26},"end":{"row":4,"column":34},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":31,"column":55},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":113},{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":33,"column":4},"end":{"row":33,"column":53},"action":"remove","lines":["PK, SK = _get_user_meta_keys(company_id, user_id)"],"id":115},{"start":{"row":33,"column":4},"end":{"row":33,"column":57},"action":"insert","lines":["PK, SK = CompanyMeta.keys_from_domain(company_domain)"]}],[{"start":{"row":33,"column":30},"end":{"row":33,"column":41},"action":"remove","lines":["from_domain"],"id":116},{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"insert","lines":["i"]},{"start":{"row":33,"column":31},"end":{"row":33,"column":32},"action":"insert","lines":["d"]},{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":33,"column":29},"end":{"row":33,"column":30},"action":"insert","lines":["_"],"id":117},{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"insert","lines":["f"]},{"start":{"row":33,"column":31},"end":{"row":33,"column":32},"action":"insert","lines":["r"]},{"start":{"row":33,"column":32},"end":{"row":33,"column":33},"action":"insert","lines":["o"]},{"start":{"row":33,"column":33},"end":{"row":33,"column":34},"action":"insert","lines":["m"]}],[{"start":{"row":33,"column":25},"end":{"row":33,"column":38},"action":"remove","lines":["keys_from_ids"],"id":118},{"start":{"row":33,"column":25},"end":{"row":33,"column":38},"action":"insert","lines":["keys_from_ids"]}],[{"start":{"row":33,"column":39},"end":{"row":33,"column":53},"action":"remove","lines":["company_domain"],"id":119},{"start":{"row":33,"column":39},"end":{"row":33,"column":40},"action":"insert","lines":["c"]},{"start":{"row":33,"column":40},"end":{"row":33,"column":41},"action":"insert","lines":["o"]},{"start":{"row":33,"column":41},"end":{"row":33,"column":42},"action":"insert","lines":["m"]},{"start":{"row":33,"column":42},"end":{"row":33,"column":43},"action":"insert","lines":["p"]},{"start":{"row":33,"column":43},"end":{"row":33,"column":44},"action":"insert","lines":["a"]}],[{"start":{"row":33,"column":39},"end":{"row":33,"column":44},"action":"remove","lines":["compa"],"id":120},{"start":{"row":33,"column":39},"end":{"row":33,"column":49},"action":"insert","lines":["company_id"]}],[{"start":{"row":33,"column":49},"end":{"row":33,"column":50},"action":"insert","lines":[","],"id":121}],[{"start":{"row":33,"column":50},"end":{"row":33,"column":51},"action":"insert","lines":[" "],"id":122},{"start":{"row":33,"column":51},"end":{"row":33,"column":52},"action":"insert","lines":["u"]},{"start":{"row":33,"column":52},"end":{"row":33,"column":53},"action":"insert","lines":["s"]},{"start":{"row":33,"column":53},"end":{"row":33,"column":54},"action":"insert","lines":["e"]},{"start":{"row":33,"column":54},"end":{"row":33,"column":55},"action":"insert","lines":["r"]}],[{"start":{"row":33,"column":51},"end":{"row":33,"column":55},"action":"remove","lines":["user"],"id":123},{"start":{"row":33,"column":51},"end":{"row":33,"column":58},"action":"insert","lines":["user_id"]}],[{"start":{"row":33,"column":13},"end":{"row":33,"column":24},"action":"remove","lines":["CompanyMeta"],"id":124},{"start":{"row":33,"column":13},"end":{"row":33,"column":21},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":39,"column":61},"end":{"row":41,"column":181},"action":"remove","lines":["","        ","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')"],"id":125}],[{"start":{"row":39,"column":8},"end":{"row":39,"column":25},"action":"remove","lines":["company_user_info"],"id":126},{"start":{"row":39,"column":8},"end":{"row":39,"column":9},"action":"insert","lines":["u"]},{"start":{"row":39,"column":9},"end":{"row":39,"column":10},"action":"insert","lines":["s"]},{"start":{"row":39,"column":10},"end":{"row":39,"column":11},"action":"insert","lines":["e"]},{"start":{"row":39,"column":11},"end":{"row":39,"column":12},"action":"insert","lines":["r"]}],[{"start":{"row":39,"column":15},"end":{"row":39,"column":34},"action":"remove","lines":["_parse_user_details"],"id":127},{"start":{"row":39,"column":15},"end":{"row":39,"column":23},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":41,"column":4},"end":{"row":50,"column":61},"action":"remove","lines":["except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))"],"id":128},{"start":{"row":41,"column":4},"end":{"row":50,"column":61},"action":"insert","lines":["except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))"]}],[{"start":{"row":54,"column":26},"end":{"row":54,"column":43},"action":"remove","lines":["company_user_info"],"id":129},{"start":{"row":54,"column":26},"end":{"row":54,"column":27},"action":"insert","lines":["u"]},{"start":{"row":54,"column":27},"end":{"row":54,"column":28},"action":"insert","lines":["s"]},{"start":{"row":54,"column":28},"end":{"row":54,"column":29},"action":"insert","lines":["e"]},{"start":{"row":54,"column":29},"end":{"row":54,"column":30},"action":"insert","lines":["r"]},{"start":{"row":54,"column":30},"end":{"row":54,"column":31},"action":"insert","lines":["."]}],[{"start":{"row":54,"column":31},"end":{"row":54,"column":32},"action":"insert","lines":["g"],"id":130},{"start":{"row":54,"column":32},"end":{"row":54,"column":33},"action":"insert","lines":["e"]},{"start":{"row":54,"column":33},"end":{"row":54,"column":34},"action":"insert","lines":["t"]}],[{"start":{"row":54,"column":31},"end":{"row":54,"column":34},"action":"remove","lines":["get"],"id":131},{"start":{"row":54,"column":31},"end":{"row":54,"column":41},"action":"insert","lines":["get_item()"]}],[{"start":{"row":54,"column":42},"end":{"row":55,"column":0},"action":"insert","lines":["",""],"id":132},{"start":{"row":55,"column":0},"end":{"row":55,"column":4},"action":"insert","lines":["    "]},{"start":{"row":55,"column":4},"end":{"row":56,"column":0},"action":"insert","lines":["",""]},{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":56,"column":0},"end":{"row":56,"column":4},"action":"remove","lines":["    "],"id":133}],[{"start":{"row":56,"column":0},"end":{"row":79,"column":31},"action":"insert","lines":["def post_company_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    company = CompanyMeta(payload)","    keys = company.get_keys()","    PK, SK = keys['PK'], keys['SK']","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","    table_record = company.get_record()","    ","","    try:","        table.put_item(Item=table_record, ConditionExpression='attribute_not_exists(PK)' ,ReturnConsumedCapacity='TOTAL')","    except ClientError as e:","        if e.response['Error']['Code']=='ConditionalCheckFailedException':","            return _response(409, {'status':\"Item already exists\"})","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(table_record, indent=4, cls=DecimalEncoder))","    item = company.get_item()","    return _response(201, item)"],"id":134}],[{"start":{"row":56,"column":4},"end":{"row":56,"column":21},"action":"remove","lines":["post_company_meta"],"id":135},{"start":{"row":56,"column":4},"end":{"row":56,"column":18},"action":"insert","lines":["post_user_meta"]}],[{"start":{"row":61,"column":14},"end":{"row":61,"column":25},"action":"remove","lines":["CompanyMeta"],"id":136},{"start":{"row":61,"column":14},"end":{"row":61,"column":15},"action":"insert","lines":["U"]},{"start":{"row":61,"column":15},"end":{"row":61,"column":16},"action":"insert","lines":["s"]},{"start":{"row":61,"column":16},"end":{"row":61,"column":17},"action":"insert","lines":["e"]},{"start":{"row":61,"column":17},"end":{"row":61,"column":18},"action":"insert","lines":["r"]}],[{"start":{"row":61,"column":14},"end":{"row":61,"column":18},"action":"remove","lines":["User"],"id":137},{"start":{"row":61,"column":14},"end":{"row":61,"column":22},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":61,"column":4},"end":{"row":61,"column":11},"action":"remove","lines":["company"],"id":138},{"start":{"row":61,"column":4},"end":{"row":61,"column":5},"action":"insert","lines":["u"]},{"start":{"row":61,"column":5},"end":{"row":61,"column":6},"action":"insert","lines":["s"]},{"start":{"row":61,"column":6},"end":{"row":61,"column":7},"action":"insert","lines":["e"]},{"start":{"row":61,"column":7},"end":{"row":61,"column":8},"action":"insert","lines":["r"]}],[{"start":{"row":78,"column":11},"end":{"row":78,"column":18},"action":"remove","lines":["company"],"id":139},{"start":{"row":78,"column":11},"end":{"row":78,"column":12},"action":"insert","lines":["u"]},{"start":{"row":78,"column":12},"end":{"row":78,"column":13},"action":"insert","lines":["s"]},{"start":{"row":78,"column":13},"end":{"row":78,"column":14},"action":"insert","lines":["e"]},{"start":{"row":78,"column":14},"end":{"row":78,"column":15},"action":"insert","lines":["r"]}],[{"start":{"row":65,"column":19},"end":{"row":65,"column":26},"action":"remove","lines":["company"],"id":140},{"start":{"row":65,"column":19},"end":{"row":65,"column":23},"action":"insert","lines":["user"]}],[{"start":{"row":62,"column":11},"end":{"row":62,"column":18},"action":"remove","lines":["company"],"id":141},{"start":{"row":62,"column":11},"end":{"row":62,"column":15},"action":"insert","lines":["user"]}],[{"start":{"row":0,"column":0},"end":{"row":205,"column":0},"action":"remove","lines":["import os","import boto3","import json","import decimal","from entities.user import UserMeta","from pprint import pprint as pp","","from boto3.dynamodb.conditions import Key, Attr","from botocore.exceptions import ClientError","from encoder_class import DecimalEncoder","","","def crud_handler(event, context):","       ","    if event['httpMethod']=='GET':","        response = get_user_meta(event, context)","        return response","    if event['httpMethod']=='POST':","        response = post_user_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_user_meta(event, context)","        return response","","","","","def get_user_meta(event, context):","    ","    table = __get_table_client()","    company_id = event[\"queryStringParameters\"][\"company_id\"]","    user_id = event[\"queryStringParameters\"][\"user_id\"]","    ","    PK, SK = UserMeta.keys_from_ids(company_id, user_id)","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","","    try:","        data = table.get_item(Key={\"PK\":PK, \"SK\":SK}, ReturnConsumedCapacity='TOTAL')","        ","        user = UserMeta(data[\"Item\"])","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))","        ","        ","    ","    return _response(200, user.get_item())","    ","def post_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    user = UserMeta(payload)","    keys = user.get_keys()","    PK, SK = keys['PK'], keys['SK']","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","    table_record = user.get_record()","    ","","    try:","        table.put_item(Item=table_record, ConditionExpression='attribute_not_exists(PK)' ,ReturnConsumedCapacity='TOTAL')","    except ClientError as e:","        if e.response['Error']['Code']=='ConditionalCheckFailedException':","            return _response(409, {'status':\"Item already exists\"})","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(table_record, indent=4, cls=DecimalEncoder))","    item = user.get_item()","    return _response(201, item)","    ","","def put_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at = _get_user_meta(payload)","    ","    print(PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at)","","    try:","        table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_id = :company_id, #user_id = :user_id, #email = :email, #first_name = :first_name, #last_name = :last_name, #address = :address, #is_admin = :is_admin, #created_at = if_not_exists(#created_at, :created_at), #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_id': 'company_id',","                '#user_id': 'user_id',","                '#email': 'email',","                '#first_name': 'first_name',","                '#last_name': 'last_name',","                '#address': 'address',","                '#is_admin': 'is_admin',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_id': company_id,","                ':user_id': user_id,","                ':email': email,","                ':first_name': first_name,","                ':last_name': last_name,","                ':address': address,","                ':is_admin': is_admin,","                ':created_at': created_at,","                ':updated_at': updated_at","            },","            ReturnConsumedCapacity='TOTAL'","        )","        payload['user_id'] = user_id","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(payload, indent=4, cls=DecimalEncoder))","        ","    if json.loads(event['body']).get('user_id'):","        return _response(200, payload)","    return _response(201, payload)","    ","    ","''' User info cleaner'''","","def _parse_user_details(item):","    item.pop('PK', None)","    item.pop('SK', None)","    return item","","''' User partition key generator '''","","def _get_user_meta(payload):","    import uuid","    time_now_rfc = _date_time_now()","    if not payload.get('user_id'):","        user_id = str(uuid.uuid4())","        created_at = time_now_rfc","        updated_at = time_now_rfc","    else:","        user_id = payload['user_id']","        updated_at = time_now_rfc","        created_at = payload.get('created_at')","    company_id = payload['company_id']","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + company_id","    email = payload['email']","    first_name = payload['first_name']","    last_name = payload['last_name']","    address = payload.get('address')","    is_admin = payload['is_admin']","    ","    ","    return (PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at,)","","def _get_user_meta_keys(company_id, user_id):","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + user_id","    return (","        PK,","        SK","        )","        ","def _date_time_now():","    import datetime","    return str(datetime.datetime.utcnow().isoformat('T'))+'Z'","# Http response builder","","def _response(status_code, json_body):","    body = json.dumps(json_body)","","    return {","        \"statusCode\": status_code,","        \"headers\": {","            \"Content-Type\": \"application/json\",","            # \"Access-Control-Allow-Origin\": \"*\"","        },","        \"body\": body,","    }","","","def __get_table_client():","    TABLE_NAME = os.getenv(\"TABLE_NAME\")","    AWS_REGION_DYNAMODB = os.getenv('AWS_REGION_DYNAMODB')","    dynamodb = boto3.resource(\"dynamodb\", region_name=AWS_REGION_DYNAMODB)","    table = dynamodb.Table(TABLE_NAME)","    return table",""],"id":148},{"start":{"row":0,"column":0},"end":{"row":252,"column":0},"action":"insert","lines":["import os","import boto3","import json","import decimal","from entities.user import UserMeta","from pprint import pprint as pp","","from boto3.dynamodb.conditions import Key, Attr","from botocore.exceptions import ClientError","from encoder_class import DecimalEncoder","","","def crud_handler(event, context):","       ","    if event['httpMethod']=='GET':","        response = get_user_meta(event, context)","        return response","    if event['httpMethod']=='POST':","        response = post_user_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_user_meta(event, context)","        return response","","","","","def get_user_meta(event, context):","    ","    table = __get_table_client()","    company_id = event[\"queryStringParameters\"][\"company_id\"]","    user_id = event[\"queryStringParameters\"][\"user_id\"]","    ","    PK, SK = UserMeta.keys_from_ids(company_id, user_id)","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","","    try:","        data = table.get_item(Key={\"PK\":PK, \"SK\":SK}, ReturnConsumedCapacity='TOTAL')","        ","        user = UserMeta(data[\"Item\"])","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))","        ","        ","    ","    return _response(200, user.get_item())","    ","def post_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    user = UserMeta(payload)","    keys = user.get_keys()","    PK, SK = keys['PK'], keys['SK']","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","    table_record = user.get_record()","    ","","    try:","        table.put_item(Item=table_record, ConditionExpression='attribute_not_exists(PK)' ,ReturnConsumedCapacity='TOTAL')","    except ClientError as e:","        if e.response['Error']['Code']=='ConditionalCheckFailedException':","            return _response(409, {'status':\"Item already exists\"})","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(table_record, indent=4, cls=DecimalEncoder))","    item = user.get_item()","    return _response(201, item)","    ","","def put_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    user = UserMeta(payload)","    table_record = user.get_record()","    PK = table_record['PK']","    SK = table_record['SK']","    try:","        response = table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_name = :company_name, #company_address = :company_address, #updated_at = :updated_at',","            ConditionExpression= 'attribute_exists(PK)',","            ExpressionAttributeNames={","                '#company_name': 'name',","                '#company_address': 'address',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_name': table_record['name'],","                ':company_address': table_record['address'],","                ':updated_at': table_record['updated_at']","            },","            ReturnValues='ALL_NEW',","            ReturnConsumedCapacity='TOTAL'","        )","","    except ClientError as e:","        if e.response['Error']['Code']=='ConditionalCheckFailedException':","            return _response(404, {'status':\"ITEM NOT FOUND\"})","            ","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(table_record, indent=4, cls=DecimalEncoder))","    print('Item update response: ',response)","    if not response.get('Attributes'):","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    item = CompanyMeta(response['Attributes']).get_item()","    return _response(200, item)","    ","def put_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at = _get_user_meta(payload)","    ","    print(PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at)","","    try:","        table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_id = :company_id, #user_id = :user_id, #email = :email, #first_name = :first_name, #last_name = :last_name, #address = :address, #is_admin = :is_admin, #created_at = if_not_exists(#created_at, :created_at), #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_id': 'company_id',","                '#user_id': 'user_id',","                '#email': 'email',","                '#first_name': 'first_name',","                '#last_name': 'last_name',","                '#address': 'address',","                '#is_admin': 'is_admin',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_id': company_id,","                ':user_id': user_id,","                ':email': email,","                ':first_name': first_name,","                ':last_name': last_name,","                ':address': address,","                ':is_admin': is_admin,","                ':created_at': created_at,","                ':updated_at': updated_at","            },","            ReturnConsumedCapacity='TOTAL'","        )","        payload['user_id'] = user_id","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(payload, indent=4, cls=DecimalEncoder))","        ","    if json.loads(event['body']).get('user_id'):","        return _response(200, payload)","    return _response(201, payload)","    ","    ","''' User info cleaner'''","","def _parse_user_details(item):","    item.pop('PK', None)","    item.pop('SK', None)","    return item","","''' User partition key generator '''","","def _get_user_meta(payload):","    import uuid","    time_now_rfc = _date_time_now()","    if not payload.get('user_id'):","        user_id = str(uuid.uuid4())","        created_at = time_now_rfc","        updated_at = time_now_rfc","    else:","        user_id = payload['user_id']","        updated_at = time_now_rfc","        created_at = payload.get('created_at')","    company_id = payload['company_id']","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + company_id","    email = payload['email']","    first_name = payload['first_name']","    last_name = payload['last_name']","    address = payload.get('address')","    is_admin = payload['is_admin']","    ","    ","    return (PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at,)","","def _get_user_meta_keys(company_id, user_id):","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + user_id","    return (","        PK,","        SK","        )","        ","def _date_time_now():","    import datetime","    return str(datetime.datetime.utcnow().isoformat('T'))+'Z'","# Http response builder","","def _response(status_code, json_body):","    body = json.dumps(json_body)","","    return {","        \"statusCode\": status_code,","        \"headers\": {","            \"Content-Type\": \"application/json\",","            # \"Access-Control-Allow-Origin\": \"*\"","        },","        \"body\": body,","    }","","","def __get_table_client():","    TABLE_NAME = os.getenv(\"TABLE_NAME\")","    AWS_REGION_DYNAMODB = os.getenv('AWS_REGION_DYNAMODB')","    dynamodb = boto3.resource(\"dynamodb\", region_name=AWS_REGION_DYNAMODB)","    table = dynamodb.Table(TABLE_NAME)","    return table",""]}],[{"start":{"row":98,"column":12},"end":{"row":109,"column":14},"action":"remove","lines":["UpdateExpression='SET #company_name = :company_name, #company_address = :company_address, #updated_at = :updated_at',","            ConditionExpression= 'attribute_exists(PK)',","            ExpressionAttributeNames={","                '#company_name': 'name',","                '#company_address': 'address',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_name': table_record['name'],","                ':company_address': table_record['address'],","                ':updated_at': table_record['updated_at']","            },"],"id":149},{"start":{"row":98,"column":12},"end":{"row":120,"column":14},"action":"insert","lines":["UpdateExpression='SET #company_id = :company_id, #user_id = :user_id, #email = :email, #first_name = :first_name, #last_name = :last_name, #address = :address, #is_admin = :is_admin, #created_at = if_not_exists(#created_at, :created_at), #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_id': 'company_id',","                '#user_id': 'user_id',","                '#email': 'email',","                '#first_name': 'first_name',","                '#last_name': 'last_name',","                '#address': 'address',","                '#is_admin': 'is_admin',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_id': company_id,","                ':user_id': user_id,","                ':email': email,","                ':first_name': first_name,","                ':last_name': last_name,","                ':address': address,","                ':is_admin': is_admin,","                ':created_at': created_at,","                ':updated_at': updated_at","            },"]}],[{"start":{"row":140,"column":0},"end":{"row":197,"column":4},"action":"remove","lines":["def put_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at = _get_user_meta(payload)","    ","    print(PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at)","","    try:","        table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_id = :company_id, #user_id = :user_id, #email = :email, #first_name = :first_name, #last_name = :last_name, #address = :address, #is_admin = :is_admin, #created_at = if_not_exists(#created_at, :created_at), #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_id': 'company_id',","                '#user_id': 'user_id',","                '#email': 'email',","                '#first_name': 'first_name',","                '#last_name': 'last_name',","                '#address': 'address',","                '#is_admin': 'is_admin',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_id': company_id,","                ':user_id': user_id,","                ':email': email,","                ':first_name': first_name,","                ':last_name': last_name,","                ':address': address,","                ':is_admin': is_admin,","                ':created_at': created_at,","                ':updated_at': updated_at","            },","            ReturnConsumedCapacity='TOTAL'","        )","        payload['user_id'] = user_id","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(payload, indent=4, cls=DecimalEncoder))","        ","    if json.loads(event['body']).get('user_id'):","        return _response(200, payload)","    return _response(201, payload)","    "],"id":150},{"start":{"row":139,"column":4},"end":{"row":140,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":141,"column":0},"end":{"row":183,"column":61},"action":"remove","lines":["''' User info cleaner'''","","def _parse_user_details(item):","    item.pop('PK', None)","    item.pop('SK', None)","    return item","","''' User partition key generator '''","","def _get_user_meta(payload):","    import uuid","    time_now_rfc = _date_time_now()","    if not payload.get('user_id'):","        user_id = str(uuid.uuid4())","        created_at = time_now_rfc","        updated_at = time_now_rfc","    else:","        user_id = payload['user_id']","        updated_at = time_now_rfc","        created_at = payload.get('created_at')","    company_id = payload['company_id']","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + company_id","    email = payload['email']","    first_name = payload['first_name']","    last_name = payload['last_name']","    address = payload.get('address')","    is_admin = payload['is_admin']","    ","    ","    return (PK, SK, company_id, user_id, email, first_name, last_name, address, is_admin, created_at, updated_at,)","","def _get_user_meta_keys(company_id, user_id):","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + user_id","    return (","        PK,","        SK","        )","        ","def _date_time_now():","    import datetime","    return str(datetime.datetime.utcnow().isoformat('T'))+'Z'"],"id":151},{"start":{"row":140,"column":4},"end":{"row":141,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":140,"column":0},"end":{"row":140,"column":4},"action":"remove","lines":["    "],"id":152},{"start":{"row":139,"column":4},"end":{"row":140,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":111,"column":31},"end":{"row":111,"column":45},"action":"insert","lines":["table_record['"],"id":153}],[{"start":{"row":112,"column":28},"end":{"row":112,"column":42},"action":"insert","lines":["table_record['"],"id":154}],[{"start":{"row":113,"column":26},"end":{"row":113,"column":40},"action":"insert","lines":["table_record['"],"id":155}],[{"start":{"row":114,"column":31},"end":{"row":114,"column":45},"action":"insert","lines":["table_record['"],"id":156}],[{"start":{"row":115,"column":30},"end":{"row":115,"column":44},"action":"insert","lines":["table_record['"],"id":157}],[{"start":{"row":116,"column":28},"end":{"row":116,"column":42},"action":"insert","lines":["table_record['"],"id":158}],[{"start":{"row":117,"column":29},"end":{"row":117,"column":43},"action":"insert","lines":["table_record['"],"id":159}],[{"start":{"row":118,"column":31},"end":{"row":118,"column":45},"action":"insert","lines":["table_record['"],"id":160}],[{"start":{"row":119,"column":31},"end":{"row":119,"column":45},"action":"insert","lines":["table_record['"],"id":161}],[{"start":{"row":111,"column":55},"end":{"row":111,"column":57},"action":"insert","lines":["']"],"id":162}],[{"start":{"row":112,"column":49},"end":{"row":112,"column":51},"action":"insert","lines":["']"],"id":163}],[{"start":{"row":113,"column":45},"end":{"row":113,"column":47},"action":"insert","lines":["']"],"id":164}],[{"start":{"row":114,"column":55},"end":{"row":114,"column":57},"action":"insert","lines":["']"],"id":165}],[{"start":{"row":115,"column":53},"end":{"row":115,"column":55},"action":"insert","lines":["']"],"id":166}],[{"start":{"row":116,"column":49},"end":{"row":116,"column":51},"action":"insert","lines":["']"],"id":167}],[{"start":{"row":117,"column":51},"end":{"row":117,"column":53},"action":"insert","lines":["']"],"id":168}],[{"start":{"row":118,"column":55},"end":{"row":118,"column":57},"action":"insert","lines":["']"],"id":169}],[{"start":{"row":119,"column":55},"end":{"row":119,"column":57},"action":"insert","lines":["']"],"id":170}],[{"start":{"row":98,"column":195},"end":{"row":98,"column":249},"action":"remove","lines":["#created_at = if_not_exists(#created_at, :created_at),"],"id":171}],[{"start":{"row":117,"column":54},"end":{"row":118,"column":58},"action":"remove","lines":["","                ':created_at': table_record['created_at'],"],"id":172}],[{"start":{"row":106,"column":40},"end":{"row":107,"column":43},"action":"remove","lines":["","                '#created_at':'created_at',"],"id":173}],[{"start":{"row":69,"column":84},"end":{"row":69,"column":86},"action":"remove","lines":["PK"],"id":174},{"start":{"row":69,"column":84},"end":{"row":69,"column":85},"action":"insert","lines":["S"]},{"start":{"row":69,"column":85},"end":{"row":69,"column":86},"action":"insert","lines":["K"]}],[{"start":{"row":135,"column":11},"end":{"row":135,"column":22},"action":"remove","lines":["CompanyMeta"],"id":175},{"start":{"row":135,"column":11},"end":{"row":135,"column":12},"action":"insert","lines":["U"]},{"start":{"row":135,"column":12},"end":{"row":135,"column":13},"action":"insert","lines":["s"]},{"start":{"row":135,"column":13},"end":{"row":135,"column":14},"action":"insert","lines":["e"]},{"start":{"row":135,"column":14},"end":{"row":135,"column":15},"action":"insert","lines":["r"]}],[{"start":{"row":135,"column":11},"end":{"row":135,"column":15},"action":"remove","lines":["User"],"id":176},{"start":{"row":135,"column":11},"end":{"row":135,"column":19},"action":"insert","lines":["UserMeta"]}],[{"start":{"row":97,"column":14},"end":{"row":98,"column":0},"action":"insert","lines":["",""],"id":177},{"start":{"row":98,"column":0},"end":{"row":98,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":98,"column":12},"end":{"row":98,"column":58},"action":"insert","lines":["ConditionExpression='attribute_not_exists(SK)'"],"id":178}],[{"start":{"row":98,"column":58},"end":{"row":98,"column":59},"action":"insert","lines":[","],"id":179}],[{"start":{"row":99,"column":60},"end":{"row":99,"column":81},"action":"remove","lines":[" #user_id = :user_id,"],"id":180}],[{"start":{"row":101,"column":44},"end":{"row":102,"column":38},"action":"remove","lines":["","                '#user_id': 'user_id',"],"id":181}],[{"start":{"row":110,"column":58},"end":{"row":111,"column":52},"action":"remove","lines":["","                ':user_id': table_record['user_id'],"],"id":182}],[{"start":{"row":99,"column":60},"end":{"row":99,"column":77},"action":"remove","lines":[" #email = :email,"],"id":183}],[{"start":{"row":99,"column":133},"end":{"row":99,"column":156},"action":"remove","lines":[" #is_admin = :is_admin,"],"id":184}],[{"start":{"row":99,"column":134},"end":{"row":99,"column":135},"action":"remove","lines":[" "],"id":185}],[{"start":{"row":101,"column":44},"end":{"row":102,"column":34},"action":"remove","lines":["","                '#email': 'email',"],"id":186}],[{"start":{"row":104,"column":38},"end":{"row":105,"column":40},"action":"remove","lines":["","                '#is_admin': 'is_admin',"],"id":187}],[{"start":{"row":107,"column":39},"end":{"row":109,"column":48},"action":"remove","lines":["","                ':company_id': table_record['company_id'],","                ':email': table_record['email'],"],"id":188}],[{"start":{"row":110,"column":52},"end":{"row":111,"column":54},"action":"remove","lines":["","                ':is_admin': table_record['is_admin'],"],"id":189}],[{"start":{"row":98,"column":42},"end":{"row":98,"column":46},"action":"remove","lines":["_not"],"id":190}],[{"start":{"row":98,"column":53},"end":{"row":98,"column":54},"action":"insert","lines":[" "],"id":191},{"start":{"row":98,"column":54},"end":{"row":98,"column":55},"action":"insert","lines":["a"]},{"start":{"row":98,"column":55},"end":{"row":98,"column":56},"action":"insert","lines":["n"]},{"start":{"row":98,"column":56},"end":{"row":98,"column":57},"action":"insert","lines":["d"]}],[{"start":{"row":98,"column":57},"end":{"row":98,"column":58},"action":"insert","lines":[" "],"id":192}],[{"start":{"row":98,"column":58},"end":{"row":98,"column":78},"action":"insert","lines":["attribute_exists(SK)"],"id":193}],[{"start":{"row":98,"column":50},"end":{"row":98,"column":51},"action":"remove","lines":["S"],"id":194},{"start":{"row":98,"column":50},"end":{"row":98,"column":51},"action":"insert","lines":["P"]}],[{"start":{"row":69,"column":63},"end":{"row":69,"column":87},"action":"insert","lines":["attribute_not_exists(SK)"],"id":195}],[{"start":{"row":69,"column":87},"end":{"row":69,"column":88},"action":"insert","lines":[" "],"id":196},{"start":{"row":69,"column":88},"end":{"row":69,"column":89},"action":"insert","lines":["a"]},{"start":{"row":69,"column":89},"end":{"row":69,"column":90},"action":"insert","lines":["n"]},{"start":{"row":69,"column":90},"end":{"row":69,"column":91},"action":"insert","lines":["d"]}],[{"start":{"row":69,"column":91},"end":{"row":69,"column":92},"action":"insert","lines":[" "],"id":197}],[{"start":{"row":69,"column":84},"end":{"row":69,"column":85},"action":"remove","lines":["S"],"id":198},{"start":{"row":69,"column":84},"end":{"row":69,"column":85},"action":"insert","lines":["P"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":51,"column":8},"end":{"row":51,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1580217682405,"hash":"df7fbe9b042961ce438672a80fc1082430b83daa"}