{"filter":false,"title":"app.py","tooltip":"/eap-company-crud/app.py","undoManager":{"mark":22,"position":22,"stack":[[{"start":{"row":0,"column":0},"end":{"row":171,"column":0},"action":"remove","lines":["import os","import boto3","import json","import decimal","","from boto3.dynamodb.conditions import Key, Attr","from botocore.exceptions import ClientError","from encoder_class import DecimalEncoder","","","def crud_handler(event, context):","    if event['httpMethod']=='GET':","        response = get_user_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_user_meta(event, context)","        return response","","","","","def get_user_meta(event, context):","    ","    table = __get_table_client()","    company_id = event[\"queryStringParameters\"][\"company_id\"]","    user_id = event[\"queryStringParameters\"][\"user_id\"]","    PK, SK = _get_user_meta_keys(company_id, user_id)","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","","    try:","        data = table.get_item(Key={\"PK\":PK, \"SK\":SK}, ReturnConsumedCapacity='TOTAL')","        ","        company_user_info = _parse_user_details(data[\"Item\"])","        ","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))","        ","        ","    ","    return _response(200, company_user_info)","    ","","def put_user_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    PK, SK, name, domain, address, company_id, created_at, updated_at = _get_company_meta(payload)","    ","    print(PK, SK, company_id, user_id, email, first_name, last_name, created_at, updated_at)","","    try:","        table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_name = :company_name, #company_domain = :company_domain, #company_address = :company_address, #company_id = :company_id, #created_at = :created_at, #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_name': 'name',","                '#company_domain': 'company_domain',","                '#company_address': 'address',","                '#company_id': 'company_id',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_name': name,","                ':company_domain': domain,","                ':company_address': address,","                ':company_id': company_id,","                ':created_at': created_at,","                ':updated_at': updated_at","            },","            ReturnConsumedCapacity='TOTAL'","        )","        payload['company_id'] = company_id","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(payload, indent=4, cls=DecimalEncoder))","        ","    return _response(201, payload)","    ","    ","''' Company info cleaner'''","","def _parse_user_details(item):","    item.pop('PK', None)","    item.pop('SK', None)","    return item","","''' Company partition key generator '''","","def _get_company_meta(payload):","    import uuid","    time_now_rfc = _date_time_now()","    if not payload.get('company_id'):","        company_id = str(uuid.uuid4())","        created_at = time_now_rfc","        updated_at = time_now_rfc","    else:","        company_id = payload['company_id']","        updated_at = time_now_rfc","        created_at = payload.get('created_at') if payload.get('created_at') else time_now_rfc","    PK = \"COMPANY#\" + company_id","    SK = \"#METADATA#\" + company_id","    name = payload['name']","    domain = payload['domain']","    address = payload['address']","    return (","        PK,","        SK,","        name,","        domain,","        address,","        company_id,","        created_at,","        updated_at","    )","","def _get_user_meta_keys(company_id, user_id):","    PK = \"COMPANY#\" + company_id","    SK = \"USER#\" + user_id","    return (","        PK,","        SK","        )","        ","def _date_time_now():","    import datetime","    return str(datetime.datetime.utcnow().isoformat('T'))+'Z'","# Http response builder","","def _response(status_code, json_body):","    body = json.dumps(json_body)","","    return {","        \"statusCode\": status_code,","        \"headers\": {","            \"Content-Type\": \"application/json\",","            # \"Access-Control-Allow-Origin\": \"*\"","        },","        \"body\": body,","    }","","","def __get_table_client():","    TABLE_NAME = os.getenv(\"TABLE_NAME\")","    AWS_REGION_DYNAMODB = os.getenv('AWS_REGION_DYNAMODB')","    dynamodb = boto3.resource(\"dynamodb\", region_name=AWS_REGION_DYNAMODB)","    table = dynamodb.Table(TABLE_NAME)","    return table",""],"id":318},{"start":{"row":0,"column":0},"end":{"row":170,"column":0},"action":"insert","lines":["import os","import boto3","import json","import decimal","","from boto3.dynamodb.conditions import Key, Attr","from botocore.exceptions import ClientError","from encoder_class import DecimalEncoder","","","def crud_handler(event, context):","    if event['httpMethod']=='GET':","        response = get_company_meta(event, context)","        return response","    if event['httpMethod']=='PUT':","        response = put_company_meta(event, context)","        return response","","","","","def get_company_meta(event, context):","    ","    table = __get_table_client()","    company_id = event[\"queryStringParameters\"][\"id\"]","    PK, SK = _get_company_meta_keys(company_id)","    print(\"Key: \", json.dumps({'PK':PK, 'SK':SK}, indent=4))","","    try:","        data = table.get_item(Key={\"PK\":PK, \"SK\":SK}, ReturnConsumedCapacity='TOTAL')","        ","        company_meta_info = _parse_company_details(data[\"Item\"])","        ","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        consumed_cap = data[\"ConsumedCapacity\"]","        print(\"GetItem succeeded:\")","        print(json.dumps(data, indent=4, cls=DecimalEncoder))","        ","        ","    ","    return _response(200, company_meta_info)","    ","","def put_company_meta(event, context):","    ","    table = __get_table_client()","    ","    payload = json.loads(event['body'])","    ","    PK, SK, name, domain, address, company_id, created_at, updated_at = _get_company_meta(payload)","    ","    print(PK, SK, name, domain, address, created_at, updated_at)","","    try:","        table.update_item(","            Key={","                'PK': PK,","                'SK': SK","            },","            UpdateExpression='SET #company_name = :company_name, #company_domain = :company_domain, #company_address = :company_address, #company_id = :company_id, #created_at = :created_at, #updated_at = :updated_at',","            ExpressionAttributeNames={","                '#company_name': 'name',","                '#company_domain': 'company_domain',","                '#company_address': 'address',","                '#company_id': 'company_id',","                '#created_at':'created_at',","                '#updated_at':'updated_at'","            },","            ExpressionAttributeValues={","                ':company_name': name,","                ':company_domain': domain,","                ':company_address': address,","                ':company_id': company_id,","                ':created_at': created_at,","                ':updated_at': updated_at","            },","            ReturnConsumedCapacity='TOTAL'","        )","        payload['company_id'] = company_id","        # response = table.get_item(Key={\"PK\":\"COMPANY#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\", \"SK\":\"#METADATA#8fd4728b-89b6-40aa-a57a-85a4672ec9a0\"}, ReturnConsumedCapacity='TOTAL')","","    except ClientError as e:","        print(e.response['Error']['Message'])","        return _response(500, {'status':\"DynamoDB Client Error\"})","    except KeyError as e:","        print(e)","        return _response(404, {'status':\"ITEM NOT FOUND\"})","    else:","        print(\"PutItem succeeded:\")","        print(json.dumps(payload, indent=4, cls=DecimalEncoder))","        ","    return _response(201, payload)","    ","    ","''' Company info cleaner'''","","def _parse_company_details(item):","    item.pop('PK', None)","    item.pop('SK', None)","    return item","","''' Company partition key generator '''","","def _get_company_meta(payload):","    import uuid","    time_now_rfc = _date_time_now()","    if not payload.get('company_id'):","        company_id = str(uuid.uuid4())","        created_at = time_now_rfc","        updated_at = time_now_rfc","    else:","        company_id = payload['company_id']","        updated_at = time_now_rfc","        created_at = payload.get('created_at') if payload.get('created_at') else time_now_rfc","    PK = \"COMPANY#\" + company_id","    SK = \"#METADATA#\" + company_id","    name = payload['name']","    domain = payload['domain']","    address = payload['address']","    return (","        PK,","        SK,","        name,","        domain,","        address,","        company_id,","        created_at,","        updated_at","    )","","def _get_company_meta_keys(company_id):","    PK = \"COMPANY#\" + company_id","    SK = \"#METADATA#\" + company_id","    return (","        PK,","        SK","        )","        ","def _date_time_now():","    import datetime","    return str(datetime.datetime.utcnow().isoformat('T'))+'Z'","# Http response builder","","def _response(status_code, json_body):","    body = json.dumps(json_body)","","    return {","        \"statusCode\": status_code,","        \"headers\": {","            \"Content-Type\": \"application/json\",","            # \"Access-Control-Allow-Origin\": \"*\"","        },","        \"body\": body,","    }","","","def __get_table_client():","    TABLE_NAME = os.getenv(\"TABLE_NAME\")","    AWS_REGION_DYNAMODB = os.getenv('AWS_REGION_DYNAMODB')","    dynamodb = boto3.resource(\"dynamodb\", region_name=AWS_REGION_DYNAMODB)","    table = dynamodb.Table(TABLE_NAME)","    return table",""]}],[{"start":{"row":99,"column":23},"end":{"row":99,"column":24},"action":"remove","lines":["1"],"id":319}],[{"start":{"row":99,"column":23},"end":{"row":99,"column":24},"action":"insert","lines":["0"],"id":320}],[{"start":{"row":97,"column":64},"end":{"row":98,"column":0},"action":"insert","lines":["",""],"id":321},{"start":{"row":98,"column":0},"end":{"row":98,"column":8},"action":"insert","lines":["        "]},{"start":{"row":98,"column":8},"end":{"row":99,"column":0},"action":"insert","lines":["",""]},{"start":{"row":99,"column":0},"end":{"row":99,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":99,"column":4},"end":{"row":99,"column":8},"action":"remove","lines":["    "],"id":322}],[{"start":{"row":99,"column":4},"end":{"row":99,"column":5},"action":"insert","lines":["i"],"id":323},{"start":{"row":99,"column":5},"end":{"row":99,"column":6},"action":"insert","lines":["f"]}],[{"start":{"row":99,"column":6},"end":{"row":99,"column":7},"action":"insert","lines":[" "],"id":324}],[{"start":{"row":99,"column":7},"end":{"row":99,"column":32},"action":"insert","lines":["json.loads(event['body'])"],"id":325}],[{"start":{"row":99,"column":32},"end":{"row":99,"column":33},"action":"insert","lines":["."],"id":326},{"start":{"row":99,"column":33},"end":{"row":99,"column":34},"action":"insert","lines":["g"]},{"start":{"row":99,"column":34},"end":{"row":99,"column":35},"action":"insert","lines":["e"]},{"start":{"row":99,"column":35},"end":{"row":99,"column":36},"action":"insert","lines":["t"]}],[{"start":{"row":99,"column":36},"end":{"row":99,"column":38},"action":"insert","lines":["()"],"id":327}],[{"start":{"row":99,"column":37},"end":{"row":99,"column":39},"action":"insert","lines":["''"],"id":328}],[{"start":{"row":99,"column":38},"end":{"row":99,"column":48},"action":"insert","lines":["company_id"],"id":329}],[{"start":{"row":99,"column":50},"end":{"row":99,"column":51},"action":"insert","lines":[":"],"id":330}],[{"start":{"row":99,"column":51},"end":{"row":100,"column":0},"action":"insert","lines":["",""],"id":331},{"start":{"row":100,"column":0},"end":{"row":100,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":100,"column":8},"end":{"row":101,"column":8},"action":"remove","lines":["","        "],"id":332},{"start":{"row":100,"column":8},"end":{"row":101,"column":0},"action":"remove","lines":["",""]},{"start":{"row":100,"column":8},"end":{"row":100,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":100,"column":38},"end":{"row":101,"column":0},"action":"insert","lines":["",""],"id":333},{"start":{"row":101,"column":0},"end":{"row":101,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":101,"column":4},"end":{"row":101,"column":8},"action":"remove","lines":["    "],"id":334}],[{"start":{"row":101,"column":4},"end":{"row":101,"column":5},"action":"insert","lines":["r"],"id":335},{"start":{"row":101,"column":5},"end":{"row":101,"column":6},"action":"insert","lines":["e"]},{"start":{"row":101,"column":6},"end":{"row":101,"column":7},"action":"insert","lines":["t"]},{"start":{"row":101,"column":7},"end":{"row":101,"column":8},"action":"insert","lines":["u"]}],[{"start":{"row":101,"column":4},"end":{"row":101,"column":8},"action":"remove","lines":["retu"],"id":336},{"start":{"row":101,"column":4},"end":{"row":101,"column":10},"action":"insert","lines":["return"]}],[{"start":{"row":101,"column":10},"end":{"row":101,"column":11},"action":"insert","lines":[" "],"id":337}],[{"start":{"row":101,"column":11},"end":{"row":101,"column":34},"action":"insert","lines":["_response(200, payload)"],"id":338}],[{"start":{"row":101,"column":23},"end":{"row":101,"column":24},"action":"remove","lines":["0"],"id":339},{"start":{"row":101,"column":23},"end":{"row":101,"column":24},"action":"insert","lines":["1"]}],[{"start":{"row":24,"column":49},"end":{"row":24,"column":51},"action":"remove","lines":["id"],"id":340},{"start":{"row":24,"column":49},"end":{"row":24,"column":59},"action":"insert","lines":["company_id"]}]]},"ace":{"folds":[],"scrolltop":102,"scrollleft":0,"selection":{"start":{"row":33,"column":50},"end":{"row":33,"column":50},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":6,"state":"start","mode":"ace/mode/python"}},"timestamp":1579414720363,"hash":"339a351f719ca759fd85a26c5d7a98752d50ec59"}