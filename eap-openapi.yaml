openapi: 3.0.2
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/k-hasan-19/eap/1.0.0
info:
# https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html
  title: EAP API
  description: EAP CRUD & Analytics web service
  version: '1.2.2'
  contact:
    email: k.hasan.rajib@gmail.com

x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
  


paths:
  /company:
    post:
      tags:
        - companies
      summary: Creates a new Company.
      operationId: addCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        description: Company information to add
      responses:
        '201':
          description: 'Company created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid input
        '404':
          description: Item not found
        '409':
          description: Item already exists
        '500':
          description: DynamoDB Client Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPCompanyCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic

  /company/{company_id}:
    get:
      tags:
        - companies
      summary: Returns a Company meta information by Company domain
      operationId: getCompanyByDomain
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company domain for looking up company meta information
          schema:
            type : string
            format: hostname
      responses:
        '200':    # status code
          description: A JSON object of company meta information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Bad input parameters
        '404':
          description: Item not found
        '500':
          description: DynamoDB Client Error
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPCompanyCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
    put:
      tags:
        - companies
      summary: updates an existing Company.
      operationId: updateCompany
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company domain to update company meta information
          schema:
            type : string
            format: hostname
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        description: Company information to update
      responses:
        '200':
          description: Company updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        
        '400':
          description: Invalid input
        '404':
          description: Item not found
        '500':
          description: DynamoDB Client Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPCompanyCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic

  /user/{company_id}:
    post:
      tags:
        - users
      summary: Creates a new User.
      operationId: addUser
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass an company id i.e domain for looking up relevant user meta information
          schema:
            type: string
            format: hostname

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User information to add
      responses:
        '201':
          description: 'User created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          
        '400':
          description: Invalid input
        '404':
          description: Item not found
        '409':
          description: Item already exists
        '500':
          description: DynamoDB Client Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPUserCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic

  /user/{company_id}/{user_id}:
    get:
      tags:
        - users
      summary: Returns a User meta information by ID
      operationId: getUserById
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass an company id i.e domain for looking up relevant user meta information
          schema:
            type : string
            format: hostname
        - name: user_id
          in: path
          required: true
          description: pass an user id i.e cognito sub id for looking up user meta information
          schema:
            type : string
            pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
            # format: email
      responses:
        '200':    # status code
          description: A JSON object of user meta information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad input parameters
        '404':
          description: Item not found
        '500':
          description: DynamoDB Client Error
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPUserCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
    put:
      tags:
        - users
      summary: Updates an existing User.
      operationId: updateUser
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass an company id i.e domain to update relevant user meta information
          schema:
            type : string
            format: hostname
        - name: user_id
          in: path
          required: true
          description: pass an user id i.e primary email to update user meta information
          schema:
            type : string
            pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}'
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            
        description: User information to update
      responses:
        '200':
          description: 'User updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '404':
          description: Item not found
        '500':
          description: DynamoDB Client Error
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPUserCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /post/{company_id}:
    post:
      tags:
        - posts
      summary: Adds a new post
      operationId: addPost
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Post details
          schema:
            type : string
            format: hostname
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        description: Post details to add
      responses:
        '201':
          description: 'Post created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          
        '400':
          description: 'Invalid input'
        '409':
          description: 'Post already exists'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
  
  
  /post/{company_id}/{post_id}:
    get:
      tags:
        - posts
      summary: Returns a Post information by ID
      operationId: getPostById
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Post details
          schema:
            type : string
            format: uuid
        - name: post_id
          in: path
          required: true
          description: pass a post id for looking up Post details
          schema:
            type : string
            format: uuid
        - in: query
          name: created_at
          required: true
          description: pass the created_at date-time for looking up relevant Post details
          schema:
            type : string
            format: date-time
            pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$'
      responses:
        '200':    # status code
          description: A JSON object of user meta information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad input parameters
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic

    put:
      tags:
        - posts
      summary: Updates an existing Post.
      operationId: updatePost
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Post details
          schema:
            type : string
            format: uuid
        - name: post_id
          in: path
          required: true
          description: pass a post id for looking up Post details
          schema:
            type : string
            format: uuid
        - in: query
          name: created_at
          required: true
          description: pass the created_at date-time for looking up relevant Post details
          schema:
            type : string
            format: date-time
            pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        description: Post details to add
      responses:
        '200':
          description: 'Post updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '201':
          description: 'Post updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          
        '400':
          description: 'Invalid input'
        '409':
          description: 'Post already exists'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostCRUDFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /posts/{company_id}:
    get:
      tags:
        - posts
      summary: Returns recent Posts details by a company
      operationId: getPostsByCompany
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Posts details
          schema:
            type : string
            format: uuid
      responses:
        '200':    # status code
          description: A array posts meta information
          content:
            application/json:
              schema:
                type : array
                items:
                  $ref: "#/components/schemas/Post"
        '400':
          description: Bad input parameters
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetCompanyPostsFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /posts/{company_id}/{user_id}:
    get:
      tags:
        - posts
      summary: Returns recent Posts details by admin user id
      operationId: getPostsByAdminUser
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Posts details
          schema:
            type : string
            format: hostname
        - name: user_id
          in: path
          required: true
          description: pass a user id for looking up Posts details
          schema:
            type : string
            format: uuid
      responses:
        '200':    # status code
          description: A array posts meta information
          content:
            application/json:
              schema:
                type : array
                items:
                  $ref: "#/components/schemas/Post"
        '400':
          description: Bad input parameters
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPGetAdminPostsFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /share/{company_id}:
    post:
      tags:
        - share
      summary: Posts users post share event
      operationId: sharePost
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a relevant company id 
          schema:
            type : string
            format: hostname
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostShare'
        description: Share event details to add
      responses:
        '201':
          description: 'Share event created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostShare'
          
        '400':
          description: 'Invalid input'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostShareEventFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /ShareDetails/{company_id}/{user_id}/{post_id}:
    get:
      tags:
        - share-details
      summary: Returns post share details for a user
      operationId: getPostShareDetailsForUser
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Post share details for the user id
          schema:
            type : string
            format: uuid
        - name: post_id
          in: path
          required: true
          description: pass a post id for looking up Post share details for the user id
          schema:
            type : string
            format: uuid
        - name: user_id
          in: path
          required: true
          description: pass a user id for looking up Post share details for the user
          schema:
            type : string
            format: uuid
      responses:
        '200':    # status code
          description: A object of post share meta information for the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostShareDetails"
        '400':
          description: Bad input parameters
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostShareDetailsForUserFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  /shareAnalytics/{company_id}/{post_id}:
    get:
      tags:
        - share-details
      summary: Returns post share analytics for a admin user
      operationId: getPostShareAnalytics
      parameters:
        - name: company_id
          in: path
          required: true
          description: pass a company id for looking up relevant Post share analytics for the admin user id
          schema:
            type : string
            format: uuid
        - name: post_id
          in: path
          required: true
          description: pass a post id for looking up Post share analytics for the admin user id
          schema:
            type : string
            format: uuid
      responses:
        '200':    # status code
          description: A object of post share analytics information for the admin user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostShareAnalytics"
        '400':
          description: Bad input parameters
          
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EAPPostShareAnalyticsFunction.Arn}/invocations
        httpMethod: POST
        passthroughBehavior: WHEN_NO_TEMPLATES
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
      x-amazon-apigateway-request-validator: basic
      
  

components:
  schemas:

    Company:
      allOf:
        - type: object
          properties:
            domain:
              type: string
              format: hostname
            name:
              type: string
              minLength: 3
              maxLength: 40
            address:
              type: string
          required:
            - domain
            - name
            - address
        - $ref: '#/components/schemas/Common'
          
        
    User:
     allOf:
        - type: object
          properties:
            company_id:
              type: string
              format: hostname
            user_id:
              type: string
              format: uuid
              pattern: '[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
              description: cognito user sub_id
            email:
              type: string
              pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}'
              format: email
            first_name:
              type: string
              minLength: 3
              maxLength: 10
            last_name:
              type: string
              minLength: 3
              maxLength: 10
            address:
              type: string
            is_admin:
              type: boolean
          required:
            - user_id
            - email
            - first_name
            - last_name
            - is_admin
        - $ref: '#/components/schemas/Common'

    Post:
      allOf:
        - type: object
          properties:
            company_id:
              type: string
              format: hostname
            user_id:
              type: string
              format: uuid
            post_id:
              type: string
              format: uuid
            post_title:
              type: string
              minLength: 3
              maxLength: 60
            post_content:
              type: string
            can_share_on:
              $ref: '#/components/schemas/CanShareOnArray'
            points_map:
              $ref: '#/components/schemas/PointsMap'
          required:
            - company_id
            - user_id
            - post_title
            - post_content
        - $ref: '#/components/schemas/Common'
        
    PostShare:
      properties:
        company_id:
          type: string
          format: hostname
        user_id:
          type: string
          format: uuid
        post_id:
          type: string
          format: uuid
        points:
          type: integer
        shared_on:
          $ref: '#/components/schemas/CanShareOn'
      required:
        - company_id
        - user_id
        - post_id
        - points
        - shared_on
        
    PostShareAnalytics:
      type: object
      properties:
        post_id:
          type: string
          format: uuid
        total_share:
          $ref: '#/components/schemas/PointsMap'
        
    PostShareDetails:
      type : object
      properties:
        post_id:
          type: string
          format: uuid
        shared_on:
          $ref: "#/components/schemas/CanShareOnArray"

    CanShareOnArray:
      type: array
      items:
        $ref: '#/components/schemas/CanShareOn'

    CanShareOn:
      type: string
      enum: [TWITTER, FACEBOOK, LINKEDIN]

    PointsMap:
      type: object
      properties:
        TWITTER:
          type: integer
        FACEBOOK:
          type: integer
        LINKEDIN:
          type: integer
        # $ref: '#/components/schemas/CanShareOn'
      additionalProperties: false

    Common:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$'
        updated_at:
          type: string
          format: date-time
          pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z$'
